init_ssh_agent() {
    for identity in ~/.ssh/.identities/*; do
        ssh-add $identity
    done
    unset identity
}

check_midway() {
    OTP=""
    if  [[ $(hostname) =~ 'dev-dsk-wruggian-isildur' ]]; then
         OTP="-o"
    fi
    SSH_CERT=~/.ssh/id_rsa-cert.pub
    if (! test -f "$SSH_CERT") || (test "`find ~/.ssh/id_rsa-cert.pub -mmin +1220`"); then
        echo "Midway expired"
        if mwinit $OTP; then
            ssh-add -D ~/.ssh/*_rsa
            ssh-add ~/.ssh/*_rsa
#            init_ssh_agent &> /dev/null
        else
            echo 'Failed to authenticate.'
	    echo 'Run check_midway again to re-authenticate.'
        fi
    fi
}

check_kerb() {
    if ! klist -s; then
        echo 'kerberos: ticket has expired...'
        kinit -f
    fi
}

is_tmux() {
    if [ -n "${TMUX}" ]; then
        return 0
    fi
    return 1
}

check_lastpass() {
    lpass status || lpass login ${LASTPASS_LOGIN}
}

devx() {
    ssh "$DEV_DSK" "source ~/.path; $@"
}

clean_brazil_pkg_cache() {
    /Users/wruggian/brazil-pkg-cache-cleaner/src/Brazil_pkg_cache_cleaner/src/brazil_pkg_cache_cleanup.py
}

check_backup() {
    echo "Checking backup status."
    echo $(date +"%Y-%m-%dT%T") > /Users/wruggian/.backup.log
    nohup $STUFF_HOME/../bin/backup.sh >> /Users/wruggian/.backup.log &
}

ssho() {
    echo "Forwarding port $1 to $DEV_DSK:$2"
    ssh -o ProxyCommand=none -T -N -L $1\:localhost\:$2 $DEV_DSK
}

remote_debug() {
    ssho 5000 $1
}

odin_tunnel() {
    echo "Forwarding odin credential retrieval requests to $DEV_DSK"
    ssh -N -L 2009\:localhost\:2009 $DEV_DSK
}

em() {
    emacsclient -c "$@"
}

uedit() {
    cmd="${2:-$EDITOR} $STUFF_HOME/.$1"
    eval "$cmd"
}

resource() {
    unset BASHRC_FORCE_SOURCE
    if [ "${1}" == "-f" ]; then
        export BASHRC_FORCE_SOURCE=1
    fi
    source ~/.bashrc
    unset BASHRC_FORCE_SOURCE
}

is_offline_mode() {
    [ -e ~/.bashrc_offline_mode ]
}

force_bashrc_source() {
    [ -n "${BASHRC_FORCE_SOURCE}" ]
}

filter_dependency_tree() {
    t="$1"
    g="$2"

    if [ -z "$g" ]; then
        echo "A BrazilPath graph was not provided, defaulting to 'all'"
        g="all" 
    fi

    if [ ! -z "$t" ]; then
	filter_dependency_tree.rb --target-packages="$t" < $(/Users/wruggian/.toolbox/bin/brazil-path "$g".graphviz 2> /dev/null)
    else
        echo "A target package (or regex) must be provided."
    fi
}

pwd_gen() {
    key="$1"
    value="$2"
    python $STUFF_HOME/../bin/pwdgen.py $key $value
}

# usage: all [-d <depth>] <command>
# runs <command> on every *file*
all() {
    depth="1"
    
    while getopts ":d:" opt; do
    	  case $opt in
	  d)
	    depth="$OPTARG"
	    shift 2
	    ;;
	  \?)
	    echo "Invalid option $OPTARG"
	    exit 1
	    ;;
	  :)
	    echo "$OPTARG requires a parameter."
	    exit 1
	    ;;
	  esac
    done
    
    find . -type f -depth $depth -exec $@ \;
}

# usage: alldirs [-d <depth>] <command>
# runs <command> on every *directory*
alldirs() {
    depth="1"

    while getopts ":d:" opt; do
          case $opt in
          d)
            depth="$OPTARG"
            shift 2
            ;;
          \?)
            echo "Invalid option $OPTARG"
            exit 1
            ;;
          :)
            echo "$OPTARG requires a parameter."
            exit 1
            ;;
          esac
    done    

    find . -type d -depth $depth -exec $@ \;
}

reset_ssh_midway() {
  # delete all identities
  ssh-add -D
  # remove known hosts
  ssh-keygen -R midway-ssh-verification-global-corp.aka.amazon.com
  killall ssh-agent
  eval `ssh-agent`
  echo "authenticate with midway, plz"
  mwinit
  ssh-add
  # verify midway works
  ssh -q midway-ssh-verification-global-corp.aka.amazon.com exit
  if [ $? -eq 0 ]; then 
    echo "Midway ssh verified"
  else
    echo "Midway ssh verification failed"
  fi
}

# Shortcut to `git fetch origin $remote && git checkout $remote`
gfc() {
    local remote="${2:-origin}"
    local branch="$1"
    git fetch $remote $branch && git checkout --track $remote/$branch
}

gri() {
    i="$1"

    if [ ! -z "$i" ]; then
        git rebase -i HEAD~$i
    fi
}

gll() {
	set +u
	git log -n1 "$@"
}

goshawk_init() {
    aws goshawk get-login --package-manager $1 --domain-name $2 --repository-name $3 --execute
}

goshawk_npm_init() {
    npm -d ping &>/dev/null || goshawk_init npm amazon $1
}

goshawk_pypi_init() {
	aws codeartifact get-authorization-token --domain amazon --domain-owner 149122183214 --query 'authorizationToken' --output text | keyring set amazon-149122183214.d.codeartifact.us-west-2.amazonaws.com aws
}

ssh_know() {
    local host=$1
    shift;
    ssh-keyscan -H $host $@ >> ~/.ssh/known_hosts
}

repath() {
    extra_paths=(`nodenv root`/versions/*/bin)
    extra_path=`printf "%s:" "${extra_paths[@]}"`
    export PATH="${extra_path}${PATH}"
}

